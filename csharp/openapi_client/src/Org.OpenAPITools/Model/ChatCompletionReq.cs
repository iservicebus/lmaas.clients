/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChatCompletionReq
    /// </summary>
    [DataContract(Name = "ChatCompletionReq")]
    public partial class ChatCompletionReq : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatCompletionReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChatCompletionReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatCompletionReq" /> class.
        /// </summary>
        /// <param name="maxTokens">maxTokens.</param>
        /// <param name="temperature">temperature (default to 0.2M).</param>
        /// <param name="topP">topP (default to 0.95M).</param>
        /// <param name="stop">stop.</param>
        /// <param name="model">model.</param>
        /// <param name="id">id (default to &quot;5ffa5d5b-5faa-4f6b-bf43-5dcecf932269&quot;).</param>
        /// <param name="reqTime">reqTime (default to &quot;2024-02-18T21:17:20.767221&quot;).</param>
        /// <param name="textList">textList (required).</param>
        public ChatCompletionReq(MaxTokens maxTokens = default(MaxTokens), decimal temperature = 0.2M, decimal topP = 0.95M, Stop stop = default(Stop), Model model = default(Model), string id = @"5ffa5d5b-5faa-4f6b-bf43-5dcecf932269", DateTime reqTime = default(DateTime), ChatTextList textList = default(ChatTextList))
        {
            // to ensure "textList" is required (not null)
            if (textList == null)
            {
                throw new ArgumentNullException("textList is a required property for ChatCompletionReq and cannot be null");
            }
            this.TextList = textList;
            this.MaxTokens = maxTokens;
            this.Temperature = temperature;
            this.TopP = topP;
            this.Stop = stop;
            this.Model = model;
            // use default value if no "id" provided
            this.Id = id ?? @"5ffa5d5b-5faa-4f6b-bf43-5dcecf932269";
            this.ReqTime = reqTime;
        }

        /// <summary>
        /// Gets or Sets MaxTokens
        /// </summary>
        [DataMember(Name = "max_tokens", EmitDefaultValue = false)]
        public MaxTokens MaxTokens { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name = "temperature", EmitDefaultValue = false)]
        public decimal Temperature { get; set; }

        /// <summary>
        /// Gets or Sets TopP
        /// </summary>
        [DataMember(Name = "top_p", EmitDefaultValue = false)]
        public decimal TopP { get; set; }

        /// <summary>
        /// Gets or Sets Stop
        /// </summary>
        [DataMember(Name = "stop", EmitDefaultValue = false)]
        public Stop Stop { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public Model Model { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ReqTime
        /// </summary>
        [DataMember(Name = "req_time", EmitDefaultValue = false)]
        public DateTime ReqTime { get; set; }

        /// <summary>
        /// Gets or Sets TextList
        /// </summary>
        [DataMember(Name = "text_list", IsRequired = true, EmitDefaultValue = true)]
        public ChatTextList TextList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatCompletionReq {\n");
            sb.Append("  MaxTokens: ").Append(MaxTokens).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TopP: ").Append(TopP).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReqTime: ").Append(ReqTime).Append("\n");
            sb.Append("  TextList: ").Append(TextList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
