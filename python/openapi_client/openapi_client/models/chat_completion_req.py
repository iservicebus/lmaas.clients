# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.chat_text_list import ChatTextList
from openapi_client.models.max_tokens import MaxTokens
from openapi_client.models.model import Model
from openapi_client.models.stop import Stop
from typing import Optional, Set
from typing_extensions import Self

class ChatCompletionReq(BaseModel):
    """
    ChatCompletionReq
    """ # noqa: E501
    max_tokens: Optional[MaxTokens] = None
    temperature: Optional[Union[StrictFloat, StrictInt]] = 0.2
    top_p: Optional[Union[StrictFloat, StrictInt]] = 0.95
    stop: Optional[Stop] = None
    model: Optional[Model] = None
    id: Optional[StrictStr] = '5ffa5d5b-5faa-4f6b-bf43-5dcecf932269'
    req_time: Optional[datetime] = None
    text_list: ChatTextList
    __properties: ClassVar[List[str]] = ["max_tokens", "temperature", "top_p", "stop", "model", "id", "req_time", "text_list"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max_tokens
        if self.max_tokens:
            _dict['max_tokens'] = self.max_tokens.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stop
        if self.stop:
            _dict['stop'] = self.stop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_list
        if self.text_list:
            _dict['text_list'] = self.text_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "max_tokens": MaxTokens.from_dict(obj["max_tokens"]) if obj.get("max_tokens") is not None else None,
            "temperature": obj.get("temperature") if obj.get("temperature") is not None else 0.2,
            "top_p": obj.get("top_p") if obj.get("top_p") is not None else 0.95,
            "stop": Stop.from_dict(obj["stop"]) if obj.get("stop") is not None else None,
            "model": Model.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "id": obj.get("id") if obj.get("id") is not None else '5ffa5d5b-5faa-4f6b-bf43-5dcecf932269',
            "req_time": obj.get("req_time"),
            "text_list": ChatTextList.from_dict(obj["text_list"]) if obj.get("text_list") is not None else None
        })
        return _obj


